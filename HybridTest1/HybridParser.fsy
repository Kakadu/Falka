%{

open Test2
open Test2
open Microsoft.FSharp.Quotations
open Microsoft.FSharp.Quotations.Patterns
open Microsoft.FSharp.Compiler
open Microsoft.FSharp.Compiler.Reflection

%}
%token <unit> EOF
%token <string> Operator
%token <float> Number

%start yard_start_1

%type <'a> yard_start_1

%%

Expression :  Number Operator Expression
               { let aaa=$1  in let aab=$2  in let aac=$3  in (fun a op c -> AExpr(op, ANumber(a), c)) aaa aab aac}
             | Number { let aad=$1  in (fun x -> ANumber(x)) aad}

yard_start_1 :  Expression EOF { let yard_start_1=$1  in yard_start_1}

