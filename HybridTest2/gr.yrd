
{
open Test3.Parser.Ast
open Test3.Lexer
open Test3.Parser
open Microsoft.FSharp.Quotations
open Microsoft.FSharp.Quotations.Patterns
open Microsoft.FSharp.Compiler
open Microsoft.FSharp.Compiler.Reflection
}

SqlExpression: 
      aaa = Ident {(fun s -> AIdent(s)) aaa}
    | aab = Localvar {(fun s -> ALocalVar(s)) aab}
    | aac = Globalvar {(fun s -> AGlobalVar(s)) aac}
    | aae = yard_exp_brackets_1 Rparen {aae}
    | aaf = yard_exp_brackets_2
        {(fun (e, where) -> ASelect(e, AIdent(where))) aaf};

+yard_start_1:  <yard_start_1> = SqlExpression EOF {yard_start_1};

yard_exp_brackets_1:  Lparen aad = SqlExpression {aad};

yard_exp_brackets_2:  aai = yard_exp_brackets_4 aaj = Ident {(aai,aaj)};

yard_exp_brackets_4:  aah = yard_exp_brackets_7 Kw_from {aah};

yard_exp_brackets_7:  Kw_select aag = SqlExpression {aag};

