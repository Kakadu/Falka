// Implementation file for parser generated by fsyacc
module GeneratedParser.Yacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "asdf.fsy"


open Test3.Parser.Ast
open Test3.Lexer
open Test3.Parser
open Microsoft.FSharp.Quotations
open Microsoft.FSharp.Quotations.Patterns
open Microsoft.FSharp.Compiler
open Microsoft.FSharp.Compiler.Reflection


# 18 "asdf.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | Ident of (string)
  | EOF of (string)
  | Kw_from of (string)
  | Kw_select of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_Ident
    | TOKEN_EOF
    | TOKEN_Kw_from
    | TOKEN_Kw_select
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startyard_start_1
    | NONTERM_SqlExpression
    | NONTERM_yard_start_1
    | NONTERM_yard_exp_brackets_1
    | NONTERM_yard_exp_brackets_2
    | NONTERM_yard_exp_brackets_3

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | Ident _ -> 0 
  | EOF _ -> 1 
  | Kw_from _ -> 2 
  | Kw_select _ -> 3 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_Ident 
  | 1 -> TOKEN_EOF 
  | 2 -> TOKEN_Kw_from 
  | 3 -> TOKEN_Kw_select 
  | 6 -> TOKEN_end_of_input
  | 4 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startyard_start_1 
    | 1 -> NONTERM_SqlExpression 
    | 2 -> NONTERM_SqlExpression 
    | 3 -> NONTERM_yard_start_1 
    | 4 -> NONTERM_yard_exp_brackets_1 
    | 5 -> NONTERM_yard_exp_brackets_2 
    | 6 -> NONTERM_yard_exp_brackets_3 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 6 
let _fsyacc_tagOfErrorTerminal = 4

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | Ident _ -> "Ident" 
  | EOF _ -> "EOF" 
  | Kw_from _ -> "Kw_from" 
  | Kw_select _ -> "Kw_select" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | Ident _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Kw_from _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Kw_select _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 2us; 65535us; 0us; 4us; 10us; 11us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 3us; 10us; 3us; 2us; 65535us; 0us; 6us; 10us; 6us; 2us; 65535us; 0us; 8us; 10us; 8us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 4us; 6us; 9us; 12us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; |]
let _fsyacc_action_rows = 12
let _fsyacc_actionTableElements = [|2us; 32768us; 0us; 2us; 3us; 10us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 1us; 32768us; 1us; 5us; 0us; 16387us; 1us; 32768us; 0us; 7us; 0us; 16388us; 1us; 32768us; 2us; 9us; 0us; 16389us; 2us; 32768us; 0us; 2us; 3us; 10us; 0us; 16390us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 6us; 8us; 9us; 11us; 12us; 14us; 15us; 18us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 2us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 3us; 4us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 16387us; 65535us; 16388us; 65535us; 16389us; 65535us; 16390us; |]
let _fsyacc_reductions ()  =    [| 
# 102 "asdf.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startyard_start_1));
# 111 "asdf.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "asdf.fsy"
                                              let aaa=_1  in (fun s -> AIdent(s)) aaa
                   )
# 23 "asdf.fsy"
                 : 'SqlExpression));
# 122 "asdf.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'yard_exp_brackets_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "asdf.fsy"
                                         let aab=_1  in (fun (e, where) -> ASelect(e, AIdent(where))) aab
                   )
# 25 "asdf.fsy"
                 : 'SqlExpression));
# 133 "asdf.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SqlExpression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "asdf.fsy"
                                                         let yard_start_1=_1  in yard_start_1
                   )
# 27 "asdf.fsy"
                 : 'a));
# 145 "asdf.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'yard_exp_brackets_2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "asdf.fsy"
                                               let aae=_1  in let aaf=_2  in (aae,aaf)
                   )
# 30 "asdf.fsy"
                 : 'yard_exp_brackets_1));
# 157 "asdf.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'yard_exp_brackets_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "asdf.fsy"
                                                                          let aad=_1  in aad
                   )
# 32 "asdf.fsy"
                 : 'yard_exp_brackets_2));
# 169 "asdf.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'SqlExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "asdf.fsy"
                                                                      let aac=_2  in aac
                   )
# 34 "asdf.fsy"
                 : 'yard_exp_brackets_3));
|]
# 182 "asdf.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 7;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let yard_start_1 lexer lexbuf : 'a =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
