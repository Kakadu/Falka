%{

open 
open Test3.Lexer
open Test3.Parser
open Microsoft.FSharp.Quotations
open Microsoft.FSharp.Quotations.Patterns
open Microsoft.FSharp.Compiler
open Microsoft.FSharp.Compiler.Reflection

%}
%token <string> KW_END
%token <string> KW_BEGIN
%token <string> KW_FUNCTION
%token <string> KW_CREATE
%token <string> KW_FROM
%token <string> KW_SELECT
%token <string> RPAREN
%token <string> LPAREN
%token <string> GLOBALVAR
%token <string> IDENT
%token <string> LOCALVAR



%%

SqlExpression :  LOCALVAR { let aaa=$1  in (fun s -> LocalVar(s)) aaa}
                | IDENT { let aab=$1  in (fun s -> Ident(s)) aab}
                | GLOBALVAR { let aac=$1  in (fun s -> GlobalVar(s)) aac}
                | | LPAREN SqlExpression { let aad=$2  in aad} RPAREN
                  { let aae=$1  in aae}
                | | | | KW_SELECT SqlExpression { let aag=$2  in aag} KW_FROM
                      { let aah=$1  in aah} IDENT
                    { let aai=$1  in let aaj=$2  in (aai,aaj)}
                  { let aaf=$1  in (fun (e, where) -> Select(e, Ident(where))) aaf}

CreateFunction :  | | | KW_CREATE KW_FUNCTION { let aal=$2  in aal} IDENT
                      { let aam=$2  in aam}
                    | SqlExpression { let aan=$1  in (fun x -> [x]) aan}
                    | | KW_BEGIN $UNEXPECTED MANY$ { let aao=$2  in aao} KW_END
                      { let aap=$1  in aap}
                    { let aaq=$1  in let aar=$2  in (aaq,aar)}
                   { let aak=$1  in (fun x -> (fun (arg0, arg1) -> CreateFunction(arg0, arg1)) x) aak}

