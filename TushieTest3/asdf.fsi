// Signature file for parser generated by fsyacc
module GeneratedParser.Yacc
open Test3.Lexer
type tokenId = 
    | TOKEN_LocalVar
    | TOKEN_Ident
    | TOKEN_GlobalVar
    | TOKEN_Rparen
    | TOKEN_Lparen
    | TOKEN_Kw_from
    | TOKEN_Kw_select
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startSqlExpression
    | NONTERM_SqlExpression
    | NONTERM_yard_exp_brackets_1
    | NONTERM_yard_exp_brackets_2
    | NONTERM_yard_exp_brackets_3
    | NONTERM_yard_exp_brackets_4
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val SqlExpression : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ('a) 
