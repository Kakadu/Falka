
{
open Test3.Parser.Ast
open Test3.Lexer
open Test3.Parser
open Microsoft.FSharp.Quotations
open Microsoft.FSharp.Quotations.Patterns
open Microsoft.FSharp.Compiler
open Microsoft.FSharp.Compiler.Reflection
}

SqlExpression: 
      aaa = Ident {(fun s -> AIdent(s)) aaa}
    | aab = yard_exp_brackets_1
        {(fun (e, where) -> ASelect(e, AIdent(where))) aab};

+yard_start_1:  <yard_start_1> = SqlExpression EOF {yard_start_1};

yard_exp_brackets_1:  aae = yard_exp_brackets_2 aaf = Ident {(aae,aaf)};

yard_exp_brackets_2:  aad = yard_exp_brackets_3 Kw_from {aad};

yard_exp_brackets_3:  Kw_select aac = SqlExpression {aac};

