
{
open Test2
open Microsoft.FSharp.Quotations
open Microsoft.FSharp.Quotations.Patterns
open Microsoft.FSharp.Compiler
open Microsoft.FSharp.Compiler.Reflection
}

Twonumbers:  aaa = yard_exp_brackets_1 {(fun s -> ANumber(s)) aaa};

+Expression: 
      aac = Number aad = Operator aae = Expression
        {(fun a op c -> AExpr(op, ANumber(a), c)) aac aad aae}
    | aaf = Number {(fun x -> ANumber(x)) aaf};

yard_exp_brackets_1:  Number aab = Number {aab};

